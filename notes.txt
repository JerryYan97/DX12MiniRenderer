Lights, shadowing, real-time HW Raytracing.
GLTF, OpenUSD loading.


Design Goal:
Muti-Renderer Backends -- Forward+, HW-RT, Deferred...
Muti-Format Model load -- GLTF, OpenUSD.
Simple ImGUI based loading logic. (It's just to show that I know this API and if I want to show that I have DCC experience, I should just investigate Blender.)
Images Dump. Camera Movement with Animation Dump.

Static Scene Switching, Loading and Rendering Feature. No Level Manipulation. Maybe good to have 

Forward(I don't feel like that I should use the Forward because it cannot work when there are too much lights.), Forward+, Deferred Rendering: https://www.3dgep.com/forward-plus/

Some graphics technique experiments -- Raytracing, Hair Rendering, Volumetric Rendering, Real-time Physics...

We can do the abstraction along the way instead of spending too much time on the software architecture.

Note that I was always using the coupled swapchain-FrameContext structure for simplicity. It is equivalent that we only have two buffers in the swapchain instead of 3, which can be harmful for the performance.

[RT RoadMap needs to be put aside because of bugs -- Need to untangle the DXR example little by little. Won't be released.]
Milestone 0: (Done)
- Integrate YamlCpp (Done)
- Setup Yaml + GLTF based scene structure. (Done)
- Render out a Triangle/Basic GLTF model in no bounce RT. (Load from fixed path)
- Integrate DX12 memory allocator. (NO Need)
- Simple ImGUI Layout -- Overlay ImGUI window, Scene Hierarchy (Print on Load). (No Need)

Milestone 1: (Done)
- Make a cornell box (GLTF) in Blender -- No. We will use Yaml to setup the scene. (Done)
-- Integrate into custom scene system. Render out a custom quad yaml scene in one pass with camera. (Done)
-- Extend the existing system. Render the constant material color. Multiple objects. And finally the cornell box.
- Integrate Input Handler, which reuses the Vulkan project's input handler. (Postpone to milestone 3)
- Cornell box GLTF Render with no bounce RT. (We don't use the importance sampling, so it's not valid.)

Milestone 2:
- Cornell box fully work path tracer rendering. (Done)
-- Use the old-school Raytracing in one-weekend basic version.
--- Design a new vert-idx structure to hold all data in one buffer to support inst diff materials/attr gen:
--- Refactorize the vert buffer / idx buffer system --> All vert and idx in a scene need to stay in one buffer in a raytracing scene.
--- Maybe I don't need to refactorize the system. We can just let the asset manager generate a big vert/idx buffer from the loaded primitive assets by gpu coping data/just loop through all models and re-upload/just don't do per-model gpu buffer upload for the rt scene.
--- Implement the Diffuse Material Models.


Milestone 3:
- Mirror material supports
- Glass material supports
- Support more complicated models -- bunny/dragon.
- Design scenes for gallery presentation -- Show the multiple materials.
- Gallery 

Milestone 4:
- Cornell box with some textured gltf PBR models and mirror 
- 

Milestone 4+:
- Sponza/Nv unreal Restir scene rendering.
- FSR integration.
- Refactorization...
- Better GUI -- 
- Volumetric Rendering...
- Hair Rendering...
- Arguments parsing -- Use exe's input arguments to determine which asset to use.


[Forward RoadMap] (Done)
Milestone 0: (Done)
Fixed Triangle (Checked)

Milestone 1: (Done)
GLTF Triangle, Cube, Sphere. (Done)
Basic Camera Model. (Done)
Shader Load Infra (Using DXC API -- NO Need) 
Basic Point Light Spheres Scene -- PBR.
-------
Specific Milestone 1 tasks:
- Shader Prebuild infra setup -- PBR shader is relatively large -- Download DXC and put it as a prebuild step.
- Model and Materials RAM and DRAM Asset Manager: Only keep one copy, default materials assign
- PBR Shader migration.
- Spheres' basic rendering
- Point lights yaml setup.
- Normal Map Integration (Possible migrate to all other vulkan examples. No Need. We will assume standard model without scaling)
-------


Milestone 2: (Done)
Texture Cube --> Texture GLTF Models. (Done)
GLTF Texture PBR basic support.
More GLTF models rendering (Simple) --> Decorate project front page.
Code Cleanup.


Milestone 3:
Integrate IBL, Cubemap Background Rendering.


Misc TODOs:
- Use singlenton, global variables and static to simplify programming patterns.
- DXR, DLSS/FSR, mesh-shader Nanite, Restir, GPU-Workgraph examples are must for my further graphics career.
- I need to decouple the model load to RAM and send RAM data to GPU. In this way, I can save memory when we are rendering the ray tracing scene by disable per-model GPU resources.

Gallery Candidants -- Texture or no texture complicated objects:
Avocado, BarramundiFish, Buggy(It needs too much self-shadow, so we give it up. Though we should support it sometime), Duck, Fox (Has animation, maybe not good), Water Bottle.

Refs:
https://github.com/microsoft/DirectXTK12/wiki/Getting-Started
https://github.com/Microsoft/DirectX-Graphics-Samples
https://microsoft.github.io/DirectX-Specs/
https://devblogs.microsoft.com/pix/
Swapchain Front Buffer v.s. Back Buffer: https://learn.microsoft.com/en-us/windows/win32/direct3d9/what-is-a-swap-chain-
Explain Fence: https://learn.microsoft.com/en-us/windows/win32/direct3d12/user-mode-heap-synchronization

USD Assets: https://github.com/usd-wg/assets.git

Nice Monte Carlo Explain: https://raytracing.github.io/books/RayTracingTheRestOfYourLife.html#overview

VMA Vulkan v.s. D3D12: https://asawicki.info/articles/memory_management_vulkan_direct3d_12.php5


Refs:
https://github.com/microsoft/DirectXTK12/wiki/Getting-Started

https://github.com/Microsoft/DirectX-Graphics-Samples

https://microsoft.github.io/DirectX-Specs/

https://devblogs.microsoft.com/pix/

https://learnopengl.com/Advanced-Lighting/Normal-Mapping (Not This)
https://learnopengl.com/Lighting/Basic-Lighting (In the One Last Thing Chapter -- Calculating World Space Geo Normal for TBN matrix transformation)

non-uniform scaling:
https://www.scratchapixel.com/lessons/mathematics-physics-for-computer-graphics/geometry/transforming-normals.html



Compile command:
dxc shader.hlsl /T lib_6_3 /Fh shader.fxh /Vn compiledShader
