Lights, shadowing, real-time HW Raytracing.
GLTF, OpenUSD loading.


Design Goal:
Muti-Renderer Backends -- Forward+, HW-RT, Deferred...
Muti-Format Model load -- GLTF, OpenUSD.
Simple ImGUI based loading logic. (It's just to show that I know this API and if I want to show that I have DCC experience, I should just investigate Blender.)
Images Dump. Camera Movement with Animation Dump.

Static Scene Switching, Loading and Rendering Feature. No Level Manipulation. Maybe good to have 

Forward(I don't feel like that I should use the Forward because it cannot work when there are too much lights.), Forward+, Deferred Rendering: https://www.3dgep.com/forward-plus/

Some graphics technique experiments -- Raytracing, Hair Rendering, Volumetric Rendering, Real-time Physics...

We can do the abstraction along the way instead of spending too much time on the software architecture.

Note that I was always using the coupled swapchain-FrameContext structure for simplicity. It is equivalent that we only have two buffers in the swapchain instead of 3, which can be harmful for the performance.

Milestone 0:
- Integrate YamlCpp
- Setup Yaml + GLTF based scene structure.
- Render out a Triangle/Basic GLTF model in rasterization.
- Integrate DX12 memory allocator.
- Simple ImGUI Layout -- Top Bar, Scene Hierarchy.

Milestone 1:
- Make a cornell box (GLTF) in Blender.
- Integrate Input Handler, which reuses the Vulkan project's input handler.


Milestone 2:
- Cornell box GLTF Render.


Refs:
https://github.com/microsoft/DirectXTK12/wiki/Getting-Started
https://github.com/Microsoft/DirectX-Graphics-Samples
https://microsoft.github.io/DirectX-Specs/
https://devblogs.microsoft.com/pix/
Swapchain Front Buffer v.s. Back Buffer: https://learn.microsoft.com/en-us/windows/win32/direct3d9/what-is-a-swap-chain-
Explain Fence: https://learn.microsoft.com/en-us/windows/win32/direct3d12/user-mode-heap-synchronization

USD Assets: https://github.com/usd-wg/assets.git

Nice Monte Carlo Explain: https://raytracing.github.io/books/RayTracingTheRestOfYourLife.html#overview

VMA Vulkan v.s. D3D12: https://asawicki.info/articles/memory_management_vulkan_direct3d_12.php5